{"ast":null,"code":"// Avoid CORS errors by using a CORS proxy\nconst URLs = {\n  modelYears: 'https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/modelYears?issueType=r',\n  makesForModelYear: year => `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/makes?modelYear=${year}&issueType=r`,\n  modelForMakeYear: (make, year) => `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/models?modelYear=${year}&make=${make}&issueType=r`,\n  recalls: (make, model, year) => `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/recalls/recallsByVehicle?make=${make}&model=${model}&modelYear=${year}`\n};\n\nconst fetchJson = url => fetch(url);\n\nconst STAGES = {\n  year: {\n    name: 'Year',\n    getDataset: () => fetch(URLs.modelYears).then(response => response.json()).then(data => {\n      console.log(data);\n    } //data.result.map((yearObj) => yearObj.modelYear)\n    )\n  },\n  make: {\n    name: 'Make',\n    getDataset: year => fetchJson(URLs.makesForModelYear(year))\n  },\n  model: {\n    name: 'Model',\n    getDataset: (make, year) => fetchJson(URLs.modelForMakeYear(make, year))\n  },\n  final: {\n    name: 'Final',\n    getDataset: (make, model, year) => fetchJson(URLs.recalls(make, model, year))\n  }\n};\nexport { STAGES, URLs };","map":{"version":3,"sources":["/Users/thegraham/Documents/xPro-Portfolio/wk15-Challenge/reacall/src/helpers/constants.js"],"names":["URLs","modelYears","makesForModelYear","year","modelForMakeYear","make","recalls","model","fetchJson","url","fetch","STAGES","name","getDataset","then","response","json","data","console","log","final"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG;AACTC,EAAAA,UAAU,EACN,4GAFK;AAGTC,EAAAA,iBAAiB,EAAGC,IAAD,IACd,uGAAsGA,IAAK,cAJvG;AAKTC,EAAAA,gBAAgB,EAAE,CAACC,IAAD,EAAOF,IAAP,KACb,wGAAuGA,IAAK,SAAQE,IAAK,cANrH;AAOTC,EAAAA,OAAO,EAAE,CAACD,IAAD,EAAOE,KAAP,EAAcJ,IAAd,KACJ,oGAAmGE,IAAK,UAASE,KAAM,cAAaJ,IAAK;AARrI,CAAb;;AAWA,MAAMK,SAAS,GAAIC,GAAD,IAASC,KAAK,CAACD,GAAD,CAAhC;;AAEA,MAAME,MAAM,GAAG;AACXR,EAAAA,IAAI,EAAE;AACFS,IAAAA,IAAI,EAAE,MADJ;AAEFC,IAAAA,UAAU,EAAE,MACRH,KAAK,CAACV,IAAI,CAACC,UAAN,CAAL,CACKa,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAGSG,IAAD,IAAU;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,KALT,CAMQ;AANR;AAHF,GADK;AAaXZ,EAAAA,IAAI,EAAE;AACFO,IAAAA,IAAI,EAAE,MADJ;AAEFC,IAAAA,UAAU,EAAGV,IAAD,IAAUK,SAAS,CAACR,IAAI,CAACE,iBAAL,CAAuBC,IAAvB,CAAD;AAF7B,GAbK;AAiBXI,EAAAA,KAAK,EAAE;AACHK,IAAAA,IAAI,EAAE,OADH;AAEHC,IAAAA,UAAU,EAAE,CAACR,IAAD,EAAOF,IAAP,KACRK,SAAS,CAACR,IAAI,CAACI,gBAAL,CAAsBC,IAAtB,EAA4BF,IAA5B,CAAD;AAHV,GAjBI;AAsBXiB,EAAAA,KAAK,EAAE;AACHR,IAAAA,IAAI,EAAE,OADH;AAEHC,IAAAA,UAAU,EAAE,CAACR,IAAD,EAAOE,KAAP,EAAcJ,IAAd,KACRK,SAAS,CAACR,IAAI,CAACM,OAAL,CAAaD,IAAb,EAAmBE,KAAnB,EAA0BJ,IAA1B,CAAD;AAHV;AAtBI,CAAf;AA6BA,SAASQ,MAAT,EAAiBX,IAAjB","sourcesContent":["// Avoid CORS errors by using a CORS proxy\nconst URLs = {\n    modelYears:\n        'https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/modelYears?issueType=r',\n    makesForModelYear: (year) =>\n        `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/makes?modelYear=${year}&issueType=r`,\n    modelForMakeYear: (make, year) =>\n        `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/models?modelYear=${year}&make=${make}&issueType=r`,\n    recalls: (make, model, year) =>\n        `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/recalls/recallsByVehicle?make=${make}&model=${model}&modelYear=${year}`,\n};\n\nconst fetchJson = (url) => fetch(url);\n\nconst STAGES = {\n    year: {\n        name: 'Year',\n        getDataset: () =>\n            fetch(URLs.modelYears)\n                .then((response) => response.json())\n                .then(\n                    (data) => {\n                        console.log(data);\n                    }\n                    //data.result.map((yearObj) => yearObj.modelYear)\n                ),\n    },\n    make: {\n        name: 'Make',\n        getDataset: (year) => fetchJson(URLs.makesForModelYear(year)),\n    },\n    model: {\n        name: 'Model',\n        getDataset: (make, year) =>\n            fetchJson(URLs.modelForMakeYear(make, year)),\n    },\n    final: {\n        name: 'Final',\n        getDataset: (make, model, year) =>\n            fetchJson(URLs.recalls(make, model, year)),\n    },\n};\n\nexport { STAGES, URLs };\n"]},"metadata":{},"sourceType":"module"}