{"ast":null,"code":"// Avoid CORS errors by using a CORS proxy\nconst URLs = {\n  modelYears: 'https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/modelYears?issueType=r',\n  makesForModelYear: year => `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/makes?modelYear=${year}&issueType=r`,\n  modelForMakeYear: (make, year) => `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/models?modelYear=${year}&make=${make}&issueType=r`,\n  recalls: (make, model, year) => `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/recalls/recallsByVehicle?make=${make}&model=${model}&modelYear=${year}`\n};\n\nconst fetchJson = url => fetch(url).then(response => console.log(response.json()));\n\nconst STAGES = {\n  year: {\n    name: 'Year',\n    getDataset: () => fetchJson(URLs.modelYears).then(data => {\n      console.log(data);\n    } //data.result.map((yearObj) => yearObj.modelYear)\n    )\n  },\n  make: {\n    name: 'Make',\n    getDataset: year => fetchJson(URLs.makesForModelYear(year))\n  },\n  model: {\n    name: 'Model',\n    getDataset: (make, year) => fetchJson(URLs.modelForMakeYear(make, year))\n  },\n  final: {\n    name: 'Final',\n    getDataset: (make, model, year) => fetchJson(URLs.recalls(make, model, year))\n  }\n};\nexport { STAGES, URLs };","map":{"version":3,"sources":["/Users/thegraham/Documents/xPro-Portfolio/wk15-Challenge/reacall/src/helpers/constants.js"],"names":["URLs","modelYears","makesForModelYear","year","modelForMakeYear","make","recalls","model","fetchJson","url","fetch","then","response","console","log","json","STAGES","name","getDataset","data","final"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG;AACTC,EAAAA,UAAU,EACN,4GAFK;AAGTC,EAAAA,iBAAiB,EAAGC,IAAD,IACd,uGAAsGA,IAAK,cAJvG;AAKTC,EAAAA,gBAAgB,EAAE,CAACC,IAAD,EAAOF,IAAP,KACb,wGAAuGA,IAAK,SAAQE,IAAK,cANrH;AAOTC,EAAAA,OAAO,EAAE,CAACD,IAAD,EAAOE,KAAP,EAAcJ,IAAd,KACJ,oGAAmGE,IAAK,UAASE,KAAM,cAAaJ,IAAK;AARrI,CAAb;;AAWA,MAAMK,SAAS,GAAIC,GAAD,IACdC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAiBC,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,EAAZ,CAA9B,CADJ;;AAGA,MAAMC,MAAM,GAAG;AACXb,EAAAA,IAAI,EAAE;AACFc,IAAAA,IAAI,EAAE,MADJ;AAEFC,IAAAA,UAAU,EAAE,MACRV,SAAS,CAACR,IAAI,CAACC,UAAN,CAAT,CAA2BU,IAA3B,CACKQ,IAAD,IAAU;AACNN,MAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACH,KAHL,CAII;AAJJ;AAHF,GADK;AAWXd,EAAAA,IAAI,EAAE;AACFY,IAAAA,IAAI,EAAE,MADJ;AAEFC,IAAAA,UAAU,EAAGf,IAAD,IAAUK,SAAS,CAACR,IAAI,CAACE,iBAAL,CAAuBC,IAAvB,CAAD;AAF7B,GAXK;AAeXI,EAAAA,KAAK,EAAE;AACHU,IAAAA,IAAI,EAAE,OADH;AAEHC,IAAAA,UAAU,EAAE,CAACb,IAAD,EAAOF,IAAP,KACRK,SAAS,CAACR,IAAI,CAACI,gBAAL,CAAsBC,IAAtB,EAA4BF,IAA5B,CAAD;AAHV,GAfI;AAoBXiB,EAAAA,KAAK,EAAE;AACHH,IAAAA,IAAI,EAAE,OADH;AAEHC,IAAAA,UAAU,EAAE,CAACb,IAAD,EAAOE,KAAP,EAAcJ,IAAd,KACRK,SAAS,CAACR,IAAI,CAACM,OAAL,CAAaD,IAAb,EAAmBE,KAAnB,EAA0BJ,IAA1B,CAAD;AAHV;AApBI,CAAf;AA2BA,SAASa,MAAT,EAAiBhB,IAAjB","sourcesContent":["// Avoid CORS errors by using a CORS proxy\nconst URLs = {\n    modelYears:\n        'https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/modelYears?issueType=r',\n    makesForModelYear: (year) =>\n        `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/makes?modelYear=${year}&issueType=r`,\n    modelForMakeYear: (make, year) =>\n        `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/products/vehicle/models?modelYear=${year}&make=${make}&issueType=r`,\n    recalls: (make, model, year) =>\n        `https://sheltered-temple-54799.herokuapp.com/https://api.nhtsa.gov/recalls/recallsByVehicle?make=${make}&model=${model}&modelYear=${year}`,\n};\n\nconst fetchJson = (url) =>\n    fetch(url).then((response) => console.log(response.json()));\n\nconst STAGES = {\n    year: {\n        name: 'Year',\n        getDataset: () =>\n            fetchJson(URLs.modelYears).then(\n                (data) => {\n                    console.log(data);\n                }\n                //data.result.map((yearObj) => yearObj.modelYear)\n            ),\n    },\n    make: {\n        name: 'Make',\n        getDataset: (year) => fetchJson(URLs.makesForModelYear(year)),\n    },\n    model: {\n        name: 'Model',\n        getDataset: (make, year) =>\n            fetchJson(URLs.modelForMakeYear(make, year)),\n    },\n    final: {\n        name: 'Final',\n        getDataset: (make, model, year) =>\n            fetchJson(URLs.recalls(make, model, year)),\n    },\n};\n\nexport { STAGES, URLs };\n"]},"metadata":{},"sourceType":"module"}