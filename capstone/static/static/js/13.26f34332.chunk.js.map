{"version":3,"sources":["pages/Login.jsx"],"names":["schema","Yup","shape","email","default","required","password","Login","signin","useContext","UserContext","useState","alert","setAlert","history","useHistory","className","open","variant","type","message","Title","Body","validationSchema","onSubmit","vals","resetForm","then","push","routes","data","path","catch","ex","finally","setTimeout","initialValues","handleSubmit","handleChange","values","isValid","errors","dirty","Group","as","Row","Label","hasValidation","Control","name","autoComplete","placeholder","value","isInvalid","onChange","Feedback","capitalize","Text","disabled","Footer","Link","to","create_account"],"mappings":"uPAaMA,EAASC,MAAaC,MAAM,CAChCC,MAAOF,MACJG,QAAQ,IACRD,QACAE,SAAS,8BACZC,SAAUL,MAAaG,QAAQ,IAAIC,SAAS,mCAmH/BE,UAhHD,WAAO,IACXC,EAAWC,qBAAWC,KAAtBF,OADU,EAEQG,mBAAS,IAFjB,mBAEXC,EAFW,KAEJC,EAFI,KAGZC,EAAUC,cAyBhB,OACE,eAAC,IAAD,CAAMC,UAAU,oBAAhB,UACGJ,EAAMK,MAAQ,cAAC,IAAD,CAAOC,QAASN,EAAMO,KAAtB,SAA6BP,EAAMQ,UAClD,cAAC,IAAKC,MAAN,CAAYL,UAAU,gCAAtB,mBACA,cAAC,IAAKM,KAAN,CAAWN,UAAU,MAArB,SACE,cAAC,IAAD,CACEO,iBAAkBvB,EAClBwB,SAAU,SAACC,EAAD,GAA0B,IAAjBC,EAAgB,EAAhBA,UA7BzBlB,EA8BmBiB,GA7BhBE,MAAK,WACJd,EAAS,CACPI,MAAM,EACNE,KAAM,UACNC,QAAS,2BAEXN,EAAQc,KAAKC,IAAOC,KAAKC,SAE1BC,OAAM,SAACC,GAAD,OACLpB,EAAS,CACPI,MAAM,EACNE,KAAM,SACNC,QACE,qEAGLc,SAAQ,WACPC,YAAW,kBAAMtB,EAAS,MAAK,SAa3Ba,KAEFU,cAAe,CACbjC,MAAO,GACPG,SAAU,IARd,SAWG,gBAAG+B,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,OAAQC,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,OAAQC,EAAxD,EAAwDA,MAAxD,OACC,eAAC,IAAD,CAAMlB,SAAUa,EAAhB,UACE,eAAC,IAAKM,MAAN,CAAYC,GAAIC,IAAK7B,UAAU,OAA/B,UACE,cAAC,IAAK8B,MAAN,oBACA,eAAC,IAAD,CAAYC,eAAa,EAAzB,UACE,cAAC,IAAKC,QAAN,CACE7B,KAAK,OACL8B,KAAK,QACLC,aAAa,QACbC,YAAY,YACZC,MAAOb,EAAOpC,MACdkD,YAAaZ,EAAOtC,MACpBmD,SAAUhB,IAEZ,cAAC,IAAKU,QAAQO,SAAd,CAAuBpC,KAAK,UAA5B,SACGqC,qBAAWf,EAAOtC,eAIzB,eAAC,IAAKwC,MAAN,CAAYC,GAAIC,IAAK7B,UAAU,OAA/B,UACE,cAAC,IAAK8B,MAAN,uBACA,eAAC,IAAD,CAAYC,eAAa,EAAzB,UACE,cAAC,IAAWU,KAAZ,CACEzC,YACIyB,EAAOnC,UAAY,mCAFzB,0BAOA,cAAC,IAAK0C,QAAN,CACE7B,KAAK,WACL8B,KAAK,WACLC,aAAa,eACbE,MAAOb,EAAOjC,SACd6C,YAAY,iBACZE,YAAaZ,EAAOnC,SACpBgD,SAAUhB,IAEZ,cAAC,IAAKU,QAAQO,SAAd,CAAuBpC,KAAK,UAA5B,SACGqC,qBAAWf,EAAOnC,kBAIzB,cAAC,IAAD,CACEa,KAAK,SACLuC,UAAWlB,IAAYE,EACvB1B,UAAU,8BAHZ,2BAWR,cAAC,IAAK2C,OAAN,CAAa3C,UAAU,6CAAvB,SACE,cAAC,IAAD,CACEE,QAAQ,UACRF,UAAU,OACV4B,GAAIgB,IACJC,GAAIhC,IAAOiC,eAAe/B,KAJ5B","file":"static/js/13.26f34332.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Card, InputGroup, Button, Row, Form } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport { capitalize } from 'lodash';\nimport { Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../constants';\nimport { useHistory } from 'react-router-dom';\n\n// Frontend validation\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .default('')\n    .email()\n    .required('Please enter a valid email'),\n  password: Yup.string().default('').required('Please enter a valid password'),\n});\n\nconst Login = () => {\n  const { signin } = useContext(UserContext);\n  const [alert, setAlert] = useState({});\n  const history = useHistory();\n\n  const submitForm = (e) => {\n    signin(e)\n      .then(() => {\n        setAlert({\n          open: true,\n          type: 'success',\n          message: 'Successfully signed in',\n        });\n        history.push(routes.data.path);\n      })\n      .catch((ex) =>\n        setAlert({\n          open: true,\n          type: 'danger',\n          message:\n            'Failed to login. Please check your credentials and try again.',\n        })\n      )\n      .finally(() => {\n        setTimeout(() => setAlert({}), 2500);\n      });\n  };\n\n  return (\n    <Card className=\"mx-auto w-50 mt-5\">\n      {alert.open && <Alert variant={alert.type}>{alert.message}</Alert>}\n      <Card.Title className=\"mb-5 pt-5 text-left display-4\">Login</Card.Title>\n      <Card.Body className=\"p-5\">\n        <Formik\n          validationSchema={schema}\n          onSubmit={(vals, { resetForm }) => {\n            submitForm(vals);\n            resetForm();\n          }}\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n        >\n          {({ handleSubmit, handleChange, values, isValid, errors, dirty }) => (\n            <Form onSubmit={handleSubmit}>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Email</Form.Label>\n                <InputGroup hasValidation>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    placeholder=\"MrJohnDoe\"\n                    value={values.email}\n                    isInvalid={!!errors.email}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.email)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Password</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text\n                    className={\n                      !!errors.password && 'text-danger border border-danger'\n                    }\n                  >\n                    &#x1f512;\n                  </InputGroup.Text>\n                  <Form.Control\n                    type=\"password\"\n                    name=\"password\"\n                    autoComplete=\"new-password\"\n                    value={values.password}\n                    placeholder=\"**************\"\n                    isInvalid={!!errors.password}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.password)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                disabled={!isValid || !dirty}\n                className=\"mt-5 w-25 mx-2 inline-block\"\n              >\n                Login\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n      <Card.Footer className=\"d-flex flex-row-reverse align-items-center\">\n        <Button\n          variant=\"primary\"\n          className=\"w-50\"\n          as={Link}\n          to={routes.create_account.path}\n        >\n          Don't have an account?\n        </Button>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}