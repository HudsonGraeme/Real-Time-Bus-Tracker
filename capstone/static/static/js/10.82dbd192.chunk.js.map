{"version":3,"sources":["pages/Deposit.jsx","components/TransactionPage.jsx"],"names":["Deposit","schema","Yup","shape","account","required","amount","typeError","min","title","transactionType","validationSchema","TransactionPage","useContext","UserContext","user","transact","useState","alert","setAlert","className","open","variant","type","message","Title","Body","onSubmit","resetForm","then","balance","catch","ex","finally","setTimeout","submitForm","initialValues","email","handleSubmit","handleChange","values","dirty","isValid","errors","Group","label","capitalize","Select","value","name","disabled","isInvalid","first_name","last_name","validNumber","formatCurrency","parseFloat","username","Label","hasValidation","Text","id","Control","placeholder","onChange","Feedback"],"mappings":"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","file":"static/js/10.82dbd192.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport TransactionPage from '../components/TransactionPage';\n\nconst Deposit = () => {\n  const schema = Yup.object().shape({\n    account: Yup.string().required(),\n    amount: Yup.number()\n      .typeError('Please enter a valid, non-negative number')\n      .min(0.01, 'Please enter a value above zero')\n      .required(),\n  });\n\n  return (\n    <TransactionPage\n      title=\"Make a Deposit\"\n      transactionType={'Deposit'}\n      validationSchema={schema}\n    />\n  );\n};\n\nexport default Deposit;\n","import {\n  Card,\n  FloatingLabel,\n  InputGroup,\n  Button,\n  Form,\n  Alert,\n} from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport capitalize from 'lodash/capitalize';\nimport { useState } from 'react';\nimport { formatCurrency, validNumber } from '../services/Utilities';\n\nconst TransactionPage = ({ title, transactionType, validationSchema }) => {\n  const { user, transact } = useContext(UserContext);\n  const [alert, setAlert] = useState({});\n\n  const submitForm = (amount) => {\n    transact(transactionType === 'Withdraw' ? -amount : amount)\n      .then(() => {\n        if (transactionType === 'Withdraw' && amount > user.balance) {\n          setAlert({\n            open: true,\n            type: 'warning',\n            message:\n              'Successfully completed your transaction, however your account is in overdraft. Please make a deposit at your earliest convenience.',\n          });\n        } else {\n          setAlert({\n            open: true,\n            type: 'success',\n            message: 'Successfully completed your transaction.',\n          });\n        }\n      })\n      .catch((ex) =>\n        setAlert({\n          open: true,\n          type: 'danger',\n          message:\n            'Failed to complete your transaction. Please check your information and try again.',\n        })\n      )\n      .finally(() => {\n        setTimeout(() => setAlert({}), 2500);\n      });\n  };\n\n  return (\n    <Card className=\"mx-auto w-50 mt-5 p-5\">\n      {alert.open && <Alert variant={alert.type}>{alert.message}</Alert>}\n      <Card.Title className=\"mb-5 text-left display-4\">{title}</Card.Title>\n      <Card.Body>\n        <Formik\n          validationSchema={validationSchema}\n          onSubmit={({ amount }, { resetForm }) => {\n            submitForm(amount);\n            resetForm();\n          }}\n          initialValues={{\n            account: user.email,\n            amount: 0.0,\n          }}\n        >\n          {({ handleSubmit, handleChange, values, dirty, isValid, errors }) => (\n            <Form onSubmit={handleSubmit}>\n              <Form.Group className=\"my-2\">\n                <FloatingLabel\n                  label={\n                    !!errors.account\n                      ? capitalize(errors.account)\n                      : `Account to ${transactionType} ${\n                          transactionType === 'Withdraw' ? 'from' : 'to'\n                        }`\n                  }\n                  className={!!errors.account && 'text-danger font-weight-bold'}\n                >\n                  <Form.Select\n                    className=\"form-select mb-4\"\n                    value={values.account}\n                    name=\"account\"\n                    disabled\n                    isInvalid={!!errors.account}\n                  >\n                    <option\n                      key={`option-account-${user.username}`}\n                      value={user.email}\n                    >\n                      {`${capitalize(user.first_name)} ${capitalize(\n                        user.last_name\n                      )} (${\n                        validNumber(user.balance)\n                          ? formatCurrency(user.balance)\n                          : 'Balance Error'\n                      }) ${\n                        validNumber(user.balance) &&\n                        parseFloat(user.balance) <= 0\n                          ? '***Overdraft***'\n                          : ''\n                      }`}\n                    </option>\n                  </Form.Select>\n                </FloatingLabel>\n              </Form.Group>\n              <Form.Group className=\"my-2\">\n                <Form.Label>Amount</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text id=\"inputGroupPrepend\">$</InputGroup.Text>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"amount\"\n                    placeholder=\"99.99\"\n                    value={values.amount}\n                    onChange={handleChange}\n                    isInvalid={!!errors.amount}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.amount)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                className=\"mt-5 w-50 mx-2 inline-block\"\n                disabled={!isValid || !dirty}\n              >\n                {`${transactionType} `}\n                {isValid &&\n                  validNumber(values.amount) &&\n                  formatCurrency(values.amount)}\n                {isValid &&\n                  ` ${\n                    transactionType === 'Withdraw' ? 'from' : 'into'\n                  } ${capitalize(user.first_name)}'s account`}\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default TransactionPage;\n"],"sourceRoot":""}