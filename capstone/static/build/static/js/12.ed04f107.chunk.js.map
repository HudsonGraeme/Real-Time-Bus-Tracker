{"version":3,"sources":["pages/CreateAccount.jsx"],"names":["schema","Yup","shape","first_name","default","required","last_name","email","username","password","matches","CreateAccount","createUser","useContext","UserContext","useState","alert","setAlert","history","useHistory","className","open","variant","type","message","Title","Body","validationSchema","onSubmit","vals","e","resetForm","then","push","routes","data","path","catch","ex","finally","setTimeout","submitForm","initialValues","handleSubmit","handleChange","values","isValid","errors","dirty","Group","as","Col","Label","hasValidation","Control","name","autoComplete","placeholder","value","isInvalid","onChange","Feedback","capitalize","Row","Text","disabled","Footer","Link","to","login"],"mappings":"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","file":"static/js/12.ed04f107.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Card, InputGroup, Button, Row, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport { capitalize } from 'lodash';\nimport { Alert } from 'react-bootstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes } from '../constants';\n// Frontend validation\nconst schema = Yup.object().shape({\n  first_name: Yup.string('ss')\n    .default('')\n    .required('Please enter your first name'),\n  last_name: Yup.string().default('').required('Please enter your last name'),\n  email: Yup.string()\n    .required('Please enter your E-Mail address')\n    .email('Invalid email address')\n    .default(''),\n  username: Yup.string().default('').required('Please enter a valid username'),\n  password: Yup.string()\n    .default('')\n    .required('Please enter a valid password')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\n      'Ensure your password contains 8 characters - One Uppercase, One Lowercase, One Number and One Special Character'\n    ),\n});\n\nconst CreateAccount = () => {\n  const { createUser } = useContext(UserContext);\n  const [alert, setAlert] = useState({});\n  const history = useHistory();\n\n  const submitForm = (e, resetForm) => {\n    createUser(e)\n      .then(() => {\n        resetForm();\n        setAlert({\n          open: true,\n          type: 'success',\n          message: 'Successfully signed up',\n        });\n        history.push(routes.data.path);\n      })\n      .catch((ex) =>\n        setAlert({\n          open: true,\n          type: 'danger',\n          message:\n            'Failed to create an account. Please check your information and try again.',\n        })\n      )\n      .finally(() => {\n        setTimeout(() => setAlert({}), 2500);\n      });\n  };\n\n  return (\n    <Card className=\"mx-auto w-50 mt-5\">\n      {alert.open && <Alert variant={alert.type}>{alert.message}</Alert>}\n      <Card.Title className=\"mb-5 pt-5 text-left display-4\">\n        Create an Account\n      </Card.Title>\n      <Card.Body className=\"p-5\">\n        <Formik\n          validationSchema={schema}\n          onSubmit={(vals, { resetForm }) => {\n            submitForm(vals, resetForm);\n          }}\n          initialValues={{\n            first_name: '',\n            last_name: '',\n            username: '',\n            email: '',\n            password: '',\n          }}\n        >\n          {({ handleSubmit, handleChange, values, isValid, errors, dirty }) => (\n            <Form onSubmit={handleSubmit}>\n              <Row>\n                <Form.Group as={Col} className=\"my-2\">\n                  <Form.Label>First Name</Form.Label>\n                  <InputGroup hasValidation>\n                    <Form.Control\n                      type=\"text\"\n                      name=\"first_name\"\n                      autoComplete=\"given-name\"\n                      placeholder=\"John\"\n                      value={values.first_name}\n                      isInvalid={!!errors.first_name}\n                      onChange={handleChange}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      {capitalize(errors.first_name)}\n                    </Form.Control.Feedback>\n                  </InputGroup>\n                </Form.Group>\n                <Form.Group as={Col} className=\"my-2\">\n                  <Form.Label>Last Name</Form.Label>\n                  <InputGroup hasValidation>\n                    <Form.Control\n                      type=\"text\"\n                      name=\"last_name\"\n                      autoComplete=\"family-name\"\n                      placeholder=\"Doe\"\n                      value={values.last_name}\n                      isInvalid={!!errors.last_name}\n                      onChange={handleChange}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      {capitalize(errors.last_name)}\n                    </Form.Control.Feedback>\n                  </InputGroup>\n                </Form.Group>\n              </Row>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Username</Form.Label>\n                <InputGroup hasValidation>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"username\"\n                    autoComplete=\"username\"\n                    placeholder=\"MrJohnDoe\"\n                    value={values.username}\n                    isInvalid={!!errors.username}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.username)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Email Address</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text\n                    className={\n                      !!errors.email && 'text-danger border border-danger'\n                    }\n                  >\n                    âœ‰\n                  </InputGroup.Text>\n                  <Form.Control\n                    type=\"email\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    value={values.email}\n                    isInvalid={!!errors.email}\n                    placeholder=\"johndoe@mail.com\"\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.email)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Password</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text\n                    className={\n                      !!errors.email && 'text-danger border border-danger'\n                    }\n                  >\n                    &#x1f512;\n                  </InputGroup.Text>\n                  <Form.Control\n                    type=\"password\"\n                    name=\"password\"\n                    autoComplete=\"new-password\"\n                    value={values.password}\n                    placeholder=\"**************\"\n                    isInvalid={!!errors.password}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.password)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                disabled={!isValid || !dirty}\n                className=\"mt-5 w-25 mx-2 inline-block\"\n              >\n                Create Account\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n      <Card.Footer className=\"d-flex flex-row-reverse align-items-center\">\n        <Button\n          variant=\"primary\"\n          className=\"w-50\"\n          as={Link}\n          to={routes.login.path}\n        >\n          Already have an account?\n        </Button>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nexport default CreateAccount;\n"],"sourceRoot":""}