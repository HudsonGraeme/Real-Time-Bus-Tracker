{"version":3,"sources":["pages/AllData.jsx"],"names":["ChartJS","register","CategoryScale","TimeScale","PointElement","LinearScale","LineElement","Title","Tooltip","Legend","options","responsive","plugins","legend","position","scales","x","grid","display","y","AllData","useContext","UserContext","user","deleteUser","useState","labels","datasets","chartData","setChartData","useEffect","transactionsReversed","get","sort","a","b","Date","date","map","t","formatDate","label","data","runningBalance","borderColor","backgroundColor","cubicInterpolationMode","tension","value","md","className","Object","keys","length","first_name","last_name","Body","height","maintainAspectRatio","transactions","header","key","startCase","toLower","transaction","parse","type","formatCurrency","Math","abs","values","charAt","id","balance","variant","onClick","name","as","Link","to","routes","create_account","path"],"mappings":"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","file":"static/js/9.07a8f064.chunk.js","sourcesContent":["import { get, startCase, toLower } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useContext } from 'react';\nimport { Button, Card, Col, Table, Row } from 'react-bootstrap';\nimport { UserContext } from '../services/UserContext';\nimport { formatCurrency, formatDate } from '../services/Utilities';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../constants';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  TimeScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  LinearScale,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport '../styles/AllData.css';\n\nChartJS.register(\n  CategoryScale,\n  TimeScale,\n  PointElement,\n  LinearScale,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top',\n    },\n  },\n  scales: {\n    x: {\n      grid: {\n        display: false,\n      },\n    },\n    y: {\n      grid: {\n        display: false,\n      },\n    },\n  },\n};\n\nconst AllData = () => {\n  const { user, deleteUser } = useContext(UserContext);\n  const [chartData, setChartData] = useState({ labels: [], datasets: [] });\n\n  useEffect(() => {\n    const transactionsReversed = get(user, 'transactions', []).sort(\n      (a, b) => new Date(a.date) - new Date(b.date)\n    );\n    setChartData({\n      labels: transactionsReversed.map((t) => formatDate(new Date(t.date))),\n      datasets: [\n        {\n          label: 'Running Balance',\n          data: transactionsReversed.map((t) => t.runningBalance),\n          borderColor: '#f88',\n          backgroundColor: '#f88',\n          cubicInterpolationMode: 'monotone',\n          tension: 0.4,\n        },\n        {\n          label: 'Transaction value',\n          data: transactionsReversed.map((t) => t.value),\n          borderColor: '#8888ff',\n          backgroundColor: '#8888bb',\n          cubicInterpolationMode: 'monotone',\n          tension: 0.4,\n        },\n      ],\n    });\n  }, [user]);\n\n  const renderUserCard = () => (\n    <Card key={`user-card-${user.name}`} className=\"m-4 p-4\">\n      <Card.Title>\n        <h2>{`${user.first_name} ${user.last_name}`}</h2>\n      </Card.Title>\n      <Card.Body>\n        <h4 className=\"text-left\">Recent Transactions</h4>\n        <Line\n          options={options}\n          data={chartData}\n          height=\"50%\"\n          maintainAspectRatio=\"false\"\n        />\n        <div>\n          <Table>\n            <thead>\n              <tr>\n                {((user.transactions || []).length\n                  ? Object.keys(user.transactions[0])\n                  : ['Date', 'Value', 'Running Balance']\n                )\n                  .map((header) =>\n                    header === 'runningBalance' ? 'Running Balance' : header\n                  )\n                  .map((key) => (\n                    <th key={`table-header-alldata-${key}`}>\n                      {\n                        startCase(\n                          toLower(key)\n                        ) /* Very cool! https://stackoverflow.com/a/38084493/10538100 */\n                      }\n                    </th>\n                  ))}\n              </tr>\n            </thead>\n            <tbody>\n              {user.transactions\n                .map((transaction) => ({\n                  ...transaction,\n                  date: formatDate(Date.parse(transaction.date)),\n                  value: `${\n                    transaction.type === 'WITHDRAW' ? '-' : '+'\n                  }${formatCurrency(Math.abs(transaction.value))}`,\n                  runningBalance: `${\n                    transaction.runningBalance < 0 ? '-' : '+'\n                  }${formatCurrency(Math.abs(transaction.runningBalance))}`,\n                }))\n                .map((transaction) => (\n                  <tr key={`transaction-row-${transaction.date}-${user.id}`}>\n                    {Object.values(transaction).map((value) => (\n                      <td\n                        key={`transaction-row-column-${value}-${user.id}-${transaction.date}`}\n                        className={`${\n                          value.charAt(0) === '-'\n                            ? 'text-danger'\n                            : value.charAt(0) === '+'\n                            ? 'text-success'\n                            : ''\n                        }`}\n                      >\n                        {value}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n        </div>\n\n        <h5 className=\"mt-4\">\n          Current Balance: {formatCurrency(user.balance)}\n        </h5>\n      </Card.Body>\n      <Button variant=\"danger\" onClick={() => deleteUser(user.id)}>\n        Delete User\n      </Button>\n    </Card>\n  );\n\n  const renderEmptyCard = () => (\n    <Card className=\"m-4 p-5\">\n      <Card.Title>No Data Exists</Card.Title>\n      <Card.Body className=\"mb-3\">\n        Navigate to the Create Account page to add a user\n      </Card.Body>\n      <Button as={Link} to={routes.create_account.path}>\n        Create a new account\n      </Button>\n    </Card>\n  );\n\n  return (\n    <Row md={1} className=\"m-5\">\n      {Object.keys(user).length ? (\n        <Col>{renderUserCard()}</Col>\n      ) : (\n        <Col>{renderEmptyCard()}</Col>\n      )}\n    </Row>\n  );\n};\n\nexport default AllData;\n"],"sourceRoot":""}