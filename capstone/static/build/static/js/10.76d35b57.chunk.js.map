{"version":3,"sources":["pages/Deposit.jsx","components/TransactionPage.jsx"],"names":["Deposit","transact","useContext","UserContext","schema","Yup","shape","account","required","amount","typeError","min","title","transactionType","validationSchema","submitFunction","TransactionPage","user","userSelectionSideEffect","useState","alert","setAlert","useEffect","open","timeout","setTimeout","clearTimeout","className","variant","type","message","Title","Body","onSubmit","resetForm","balance","submitForm","initialValues","email","handleSubmit","handleChange","values","dirty","isValid","errors","Group","label","capitalize","Select","value","name","disabled","isInvalid","first_name","last_name","validNumber","formatCurrency","parseFloat","username","Label","hasValidation","Text","id","Control","placeholder","onChange","Feedback"],"mappings":"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","file":"static/js/10.76d35b57.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport TransactionPage from '../components/TransactionPage';\n\nconst Deposit = () => {\n  const { transact } = useContext(UserContext);\n  const schema = Yup.object().shape({\n    account: Yup.string().required(),\n    amount: Yup.number()\n      .typeError('Please enter a valid, non-negative number')\n      .min(0.01, 'Please enter a value above zero')\n      .required(),\n  });\n\n  return (\n    <TransactionPage\n      title=\"Make a Deposit\"\n      transactionType={'Deposit'}\n      validationSchema={schema}\n      submitFunction={transact}\n    />\n  );\n};\n\nexport default Deposit;\n","import {\n  Card,\n  FloatingLabel,\n  InputGroup,\n  Button,\n  Form,\n  Alert,\n} from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport capitalize from 'lodash/capitalize';\nimport { useState } from 'react';\nimport { formatCurrency, validNumber } from '../services/Utilities';\nimport { useEffect } from 'react';\n\nconst TransactionPage = ({\n  title,\n  transactionType,\n  validationSchema,\n  submitFunction,\n  userSelectionSideEffect = () => {},\n}) => {\n  const { user } = useContext(UserContext);\n  const [alert, setAlert] = useState({});\n\n  // Once the alert is shown, hide it after 2.5s\n  useEffect(() => {\n    if (!alert.open) {\n      return;\n    }\n    const timeout = setTimeout(() => setAlert({}), 2500);\n    return () => clearTimeout(timeout);\n  }, [alert]);\n\n  const submitForm = (amount) => {\n    if (transactionType === 'Withdraw' && amount > user.balance) {\n      setAlert({\n        open: true,\n        type: 'warning',\n        message:\n          'Successfully completed your transaction, however your account is in overdraft. Please make a deposit at your earliest convenience.',\n      });\n    } else {\n      setAlert({\n        open: true,\n        type: 'success',\n        message: 'Successfully completed your transaction.',\n      });\n    }\n    submitFunction(transactionType === 'Withdraw' ? -amount : amount);\n  };\n\n  return (\n    <Card className=\"mx-auto w-50 mt-5 p-5\">\n      {alert.open && <Alert variant={alert.type}>{alert.message}</Alert>}\n      <Card.Title className=\"mb-5 text-left display-4\">{title}</Card.Title>\n      <Card.Body>\n        <Formik\n          validationSchema={validationSchema}\n          onSubmit={({ amount }, { resetForm }) => {\n            submitForm(amount);\n            resetForm();\n          }}\n          initialValues={{\n            account: user.email,\n            amount: 0.0,\n          }}\n        >\n          {({ handleSubmit, handleChange, values, dirty, isValid, errors }) => (\n            <Form onSubmit={handleSubmit}>\n              <Form.Group className=\"my-2\">\n                <FloatingLabel\n                  label={\n                    !!errors.account\n                      ? capitalize(errors.account)\n                      : `Account to ${transactionType} ${\n                          transactionType === 'Withdraw' ? 'from' : 'to'\n                        }`\n                  }\n                  className={!!errors.account && 'text-danger font-weight-bold'}\n                >\n                  <Form.Select\n                    className=\"form-select mb-4\"\n                    value={values.account}\n                    name=\"account\"\n                    disabled\n                    isInvalid={!!errors.account}\n                  >\n                    <option\n                      key={`option-account-${user.username}`}\n                      value={user.email}\n                    >\n                      {`${capitalize(user.first_name)} ${capitalize(\n                        user.last_name\n                      )} (${\n                        validNumber(user.balance)\n                          ? formatCurrency(user.balance)\n                          : 'Balance Error'\n                      }) ${\n                        validNumber(user.balance) &&\n                        parseFloat(user.balance) <= 0\n                          ? '***Overdraft***'\n                          : ''\n                      }`}\n                    </option>\n                  </Form.Select>\n                </FloatingLabel>\n              </Form.Group>\n              <Form.Group className=\"my-2\">\n                <Form.Label>Amount</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text id=\"inputGroupPrepend\">$</InputGroup.Text>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"amount\"\n                    placeholder=\"99.99\"\n                    value={values.amount}\n                    onChange={handleChange}\n                    isInvalid={!!errors.amount}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.amount)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                className=\"mt-5 w-50 mx-2 inline-block\"\n                disabled={!isValid || !dirty}\n              >\n                {`${transactionType} `}\n                {isValid &&\n                  validNumber(values.amount) &&\n                  formatCurrency(values.amount)}\n                {isValid &&\n                  ` ${\n                    transactionType === 'Withdraw' ? 'from' : 'into'\n                  } ${capitalize(user.first_name)}'s account`}\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default TransactionPage;\n"],"sourceRoot":""}