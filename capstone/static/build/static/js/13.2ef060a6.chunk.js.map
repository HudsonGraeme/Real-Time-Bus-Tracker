{"version":3,"sources":["pages/Login.jsx"],"names":["schema","Yup","shape","email","default","required","password","Login","signin","useContext","UserContext","useState","alert","setAlert","className","open","variant","type","message","Title","Body","validationSchema","onSubmit","vals","resetForm","then","catch","ex","finally","setTimeout","initialValues","handleSubmit","handleChange","values","isValid","errors","dirty","Group","as","Row","Label","hasValidation","Control","name","autoComplete","placeholder","value","isInvalid","onChange","Feedback","capitalize","Text","disabled","Footer","Link","to","routes","create_account","path"],"mappings":"+OAYMA,EAASC,MAAaC,MAAM,CAChCC,MAAOF,MACJG,QAAQ,IACRD,QACAE,SAAS,8BACZC,SAAUL,MAAaG,QAAQ,IAAIC,SAAS,mCAiH/BE,UA9GD,WAAO,IACXC,EAAWC,qBAAWC,KAAtBF,OADU,EAEQG,mBAAS,IAFjB,mBAEXC,EAFW,KAEJC,EAFI,KA0BlB,OACE,eAAC,IAAD,CAAMC,UAAU,oBAAhB,UACGF,EAAMG,MAAQ,cAAC,IAAD,CAAOC,QAASJ,EAAMK,KAAtB,SAA6BL,EAAMM,UAClD,cAAC,IAAKC,MAAN,CAAYL,UAAU,gCAAtB,mBACA,cAAC,IAAKM,KAAN,CAAWN,UAAU,MAArB,SACE,cAAC,IAAD,CACEO,iBAAkBrB,EAClBsB,SAAU,SAACC,EAAD,GAA0B,IAAjBC,EAAgB,EAAhBA,UA5BzBhB,EA6BmBe,GA5BhBE,MAAK,kBACJZ,EAAS,CACPE,MAAM,EACNE,KAAM,UACNC,QAAS,8BAGZQ,OAAM,SAACC,GAAD,OACLd,EAAS,CACPE,MAAM,EACNE,KAAM,SACNC,QACE,qEAGLU,SAAQ,WACPC,YAAW,kBAAMhB,EAAS,MAAK,SAa3BW,KAEFM,cAAe,CACb3B,MAAO,GACPG,SAAU,IARd,SAWG,gBAAGyB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,OAAQC,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,OAAQC,EAAxD,EAAwDA,MAAxD,OACC,eAAC,IAAD,CAAMd,SAAUS,EAAhB,UACE,eAAC,IAAKM,MAAN,CAAYC,GAAIC,IAAKzB,UAAU,OAA/B,UACE,cAAC,IAAK0B,MAAN,oBACA,eAAC,IAAD,CAAYC,eAAa,EAAzB,UACE,cAAC,IAAKC,QAAN,CACEzB,KAAK,OACL0B,KAAK,QACLC,aAAa,QACbC,YAAY,YACZC,MAAOb,EAAO9B,MACd4C,YAAaZ,EAAOhC,MACpB6C,SAAUhB,IAEZ,cAAC,IAAKU,QAAQO,SAAd,CAAuBhC,KAAK,UAA5B,SACGiC,qBAAWf,EAAOhC,eAIzB,eAAC,IAAKkC,MAAN,CAAYC,GAAIC,IAAKzB,UAAU,OAA/B,UACE,cAAC,IAAK0B,MAAN,uBACA,eAAC,IAAD,CAAYC,eAAa,EAAzB,UACE,cAAC,IAAWU,KAAZ,CACErC,YACIqB,EAAO7B,UAAY,mCAFzB,0BAOA,cAAC,IAAKoC,QAAN,CACEzB,KAAK,WACL0B,KAAK,WACLC,aAAa,eACbE,MAAOb,EAAO3B,SACduC,YAAY,iBACZE,YAAaZ,EAAO7B,SACpB0C,SAAUhB,IAEZ,cAAC,IAAKU,QAAQO,SAAd,CAAuBhC,KAAK,UAA5B,SACGiC,qBAAWf,EAAO7B,kBAIzB,cAAC,IAAD,CACEW,KAAK,SACLmC,UAAWlB,IAAYE,EACvBtB,UAAU,8BAHZ,2BAWR,cAAC,IAAKuC,OAAN,CAAavC,UAAU,6CAAvB,SACE,cAAC,IAAD,CACEE,QAAQ,UACRF,UAAU,OACVwB,GAAIgB,IACJC,GAAIC,IAAOC,eAAeC,KAJ5B","file":"static/js/13.2ef060a6.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Card, InputGroup, Button, Row, Form } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport { capitalize } from 'lodash';\nimport { Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../constants';\n\n// Frontend validation\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .default('')\n    .email()\n    .required('Please enter a valid email'),\n  password: Yup.string().default('').required('Please enter a valid password'),\n});\n\nconst Login = () => {\n  const { signin } = useContext(UserContext);\n  const [alert, setAlert] = useState({});\n\n  const submitForm = (e) => {\n    signin(e)\n      .then(() =>\n        setAlert({\n          open: true,\n          type: 'success',\n          message: 'Successfully signed in',\n        })\n      )\n      .catch((ex) =>\n        setAlert({\n          open: true,\n          type: 'danger',\n          message:\n            'Failed to login. Please check your credentials and try again.',\n        })\n      )\n      .finally(() => {\n        setTimeout(() => setAlert({}), 2500);\n      });\n  };\n\n  return (\n    <Card className=\"mx-auto w-50 mt-5\">\n      {alert.open && <Alert variant={alert.type}>{alert.message}</Alert>}\n      <Card.Title className=\"mb-5 pt-5 text-left display-4\">Login</Card.Title>\n      <Card.Body className=\"p-5\">\n        <Formik\n          validationSchema={schema}\n          onSubmit={(vals, { resetForm }) => {\n            submitForm(vals);\n            resetForm();\n          }}\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n        >\n          {({ handleSubmit, handleChange, values, isValid, errors, dirty }) => (\n            <Form onSubmit={handleSubmit}>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Email</Form.Label>\n                <InputGroup hasValidation>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    placeholder=\"MrJohnDoe\"\n                    value={values.email}\n                    isInvalid={!!errors.email}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.email)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Password</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text\n                    className={\n                      !!errors.password && 'text-danger border border-danger'\n                    }\n                  >\n                    &#x1f512;\n                  </InputGroup.Text>\n                  <Form.Control\n                    type=\"password\"\n                    name=\"password\"\n                    autoComplete=\"new-password\"\n                    value={values.password}\n                    placeholder=\"**************\"\n                    isInvalid={!!errors.password}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.password)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                disabled={!isValid || !dirty}\n                className=\"mt-5 w-25 mx-2 inline-block\"\n              >\n                Login\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n      <Card.Footer className=\"d-flex flex-row-reverse align-items-center\">\n        <Button\n          variant=\"primary\"\n          className=\"w-50\"\n          as={Link}\n          to={routes.create_account.path}\n        >\n          Don't have an account?\n        </Button>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}