{"version":3,"sources":["../node_modules/react-bootstrap/esm/Row.js","pages/CreateAccount.jsx"],"names":["DEVICE_SIZES","Row","React","ref","bsPrefix","className","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName","schema","Yup","shape","first_name","default","required","last_name","email","username","password","matches","CreateAccount","useContext","UserContext","createUser","users","useState","alert","setAlert","useEffect","open","timeout","setTimeout","clearTimeout","variant","type","message","Title","Body","validationSchema","onSubmit","vals","resetForm","initialValues","handleSubmit","handleChange","values","isValid","errors","dirty","Group","Label","hasValidation","Control","name","autoComplete","placeholder","value","isInvalid","onChange","Feedback","capitalize","Text","disabled","length"],"mappings":"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","file":"static/js/9.55a4b0fc.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import { useState, useEffect } from 'react';\nimport { Card, InputGroup, Button, Row, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport { capitalize } from 'lodash';\nimport { Alert } from 'react-bootstrap';\n\n// Frontend validation\nconst schema = Yup.object().shape({\n  first_name: Yup.string('ss')\n    .default('')\n    .required('Please enter your first name'),\n  last_name: Yup.string().default('').required('Please enter your last name'),\n  email: Yup.string()\n    .required('Please enter your E-Mail address')\n    .email('Invalid email address')\n    .default(''),\n  username: Yup.string().default('').required('Please enter a valid username'),\n  password: Yup.string()\n    .default('')\n    .required('Please enter a valid password')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\n      'Ensure your password contains 8 characters - One Uppercase, One Lowercase, One Number and One Special Character'\n    ),\n});\n\nconst CreateAccount = () => {\n  const { createUser, users } = useContext(UserContext);\n  const [alert, setAlert] = useState({});\n  // Once the alert is shown, hide it after 2.5s\n  useEffect(() => {\n    if (!alert.open) {\n      return;\n    }\n    const timeout = setTimeout(() => setAlert({}), 2500);\n    return () => clearTimeout(timeout);\n  }, [alert]);\n\n  const submitForm = (e) => {\n    createUser(e);\n    setAlert({\n      open: true,\n      type: 'success',\n      message: 'Successfully created a new account',\n    });\n  };\n\n  return (\n    <Card className=\"mx-auto w-50 mt-5 p-5\">\n      {alert.open && <Alert variant={alert.type}>{alert.message}</Alert>}\n      <Card.Title className=\"mb-5 text-left display-4\">\n        Create an Account\n      </Card.Title>\n      <Card.Body>\n        <Formik\n          validationSchema={schema}\n          onSubmit={(vals, { resetForm }) => {\n            submitForm(vals);\n            resetForm();\n          }}\n          initialValues={{\n            first_name: '',\n            last_name: '',\n            username: '',\n            email: '',\n            password: '',\n          }}\n        >\n          {({ handleSubmit, handleChange, values, isValid, errors, dirty }) => (\n            <Form onSubmit={handleSubmit}>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>First Name</Form.Label>\n                <InputGroup hasValidation>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"first_name\"\n                    autoComplete=\"name\"\n                    placeholder=\"John\"\n                    value={values.first_name}\n                    isInvalid={!!errors.first_name}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.first_name)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n                <Form.Label>Last Name</Form.Label>\n                <InputGroup hasValidation>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"last_name\"\n                    autoComplete=\"name\"\n                    placeholder=\"Doe\"\n                    value={values.last_name}\n                    isInvalid={!!errors.last_name}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.last_name)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Username</Form.Label>\n                <InputGroup hasValidation>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"username\"\n                    autoComplete=\"name\"\n                    placeholder=\"MrJohnDoe\"\n                    value={values.username}\n                    isInvalid={!!errors.username}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.username)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Email Address</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text\n                    className={\n                      !!errors.email && 'text-danger border border-danger'\n                    }\n                  >\n                    ✉\n                  </InputGroup.Text>\n                  <Form.Control\n                    type=\"email\"\n                    name=\"email\"\n                    autoComplete=\"username\"\n                    value={values.email}\n                    isInvalid={!!errors.email}\n                    placeholder=\"johndoe@mail.com\"\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.email)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Form.Group as={Row} className=\"my-2\">\n                <Form.Label>Password</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text\n                    className={\n                      !!errors.email && 'text-danger border border-danger'\n                    }\n                  >\n                    &#x1f512;\n                  </InputGroup.Text>\n                  <Form.Control\n                    type=\"password\"\n                    name=\"password\"\n                    autoComplete=\"new-password\"\n                    value={values.password}\n                    placeholder=\"**************\"\n                    isInvalid={!!errors.password}\n                    onChange={handleChange}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.password)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                disabled={!isValid || !dirty}\n                className=\"mt-5 w-25 mx-2 inline-block\"\n              >\n                {users.length ? 'Add another account' : 'Create Account'}\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CreateAccount;\n"],"sourceRoot":""}