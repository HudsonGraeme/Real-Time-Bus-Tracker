{"version":3,"sources":["services/Utilities.js","components/TransactionPage.jsx","pages/Withdraw.jsx"],"names":["numberFormatter","Intl","NumberFormat","currency","style","dateFormatter","DateTimeFormat","year","month","day","hour","minute","second","formatCurrency","number","float","parseFloat","format","formatDate","date","validNumber","TransactionPage","title","transactionType","validationSchema","submitFunction","userSelectionSideEffect","users","useContext","UserContext","useState","selectedUser","setSelectedUser","alert","setAlert","useEffect","open","timeout","setTimeout","clearTimeout","className","variant","type","message","Title","Body","onSubmit","account","amount","resetForm","find","id","balance","submitForm","initialValues","handleSubmit","handleChange","values","dirty","isValid","errors","Group","label","capitalize","Select","value","name","onChange","e","target","user","isInvalid","map","Label","hasValidation","Text","Control","placeholder","Feedback","disabled","Withdraw","withdraw","schema","Yup","shape","oneOf","required","typeError","min","max","Number","POSITIVE_INFINITY","userId","usr"],"mappings":"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","file":"static/js/8.3251e499.chunk.js","sourcesContent":["const numberFormatter = new Intl.NumberFormat('en-US', {\n  currency: 'USD',\n  style: 'currency',\n});\n\nconst dateFormatter = new Intl.DateTimeFormat('default', {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n});\n\n/**\n * Provides an interface to convert balances into formatted currency strings for display\n * @param {Number} number The number to be formatted\n * @returns {String} A formatted currency string\n */\nconst formatCurrency = (number) => {\n  const float = parseFloat(number);\n  return numberFormatter.format(float);\n};\n\n/**\n * Formats the provided Date into a string\n * @param {Date} date The date to be formatted\n * @returns {String} A formatter datetime string\n */\nconst formatDate = (date) => {\n  return dateFormatter.format(date);\n};\n\n/**\n * Determines whether or not a number exists (0 is truthy, null isn't)\n * @param {Number} number The number that will be checked for a non existent value\n * @returns {Boolean} True or false depending if the number exists or not\n */\nconst validNumber = (number) => number || number === 0;\n\nexport { formatCurrency, validNumber, formatDate };\n","import {\n  Card,\n  FloatingLabel,\n  InputGroup,\n  Button,\n  Form,\n  Alert,\n} from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport { capitalize } from 'lodash';\nimport { useState } from 'react';\nimport { formatCurrency, validNumber } from '../services/Utilities';\nimport { useEffect } from 'react';\n\nconst TransactionPage = ({\n  title,\n  transactionType,\n  validationSchema,\n  submitFunction,\n  userSelectionSideEffect = () => {},\n}) => {\n  const { users } = useContext(UserContext);\n  const [selectedUser, setSelectedUser] = useState({});\n  const [alert, setAlert] = useState({});\n\n  // Once the alert is shown, hide it after 2.5s\n  useEffect(() => {\n    if (!alert.open) {\n      return;\n    }\n    const timeout = setTimeout(() => setAlert({}), 2500);\n    return () => clearTimeout(timeout);\n  }, [alert]);\n\n  const submitForm = (account, amount) => {\n    if (\n      transactionType === 'Withdraw' &&\n      amount > users.find(({ id }) => account === id).balance\n    ) {\n      setAlert({\n        open: true,\n        type: 'warning',\n        message:\n          'Successfully completed your transaction, however your account is in overdraft. Please make a deposit at your earliest convenience.',\n      });\n    } else {\n      setAlert({\n        open: true,\n        type: 'success',\n        message: 'Successfully completed your transaction.',\n      });\n    }\n    submitFunction(account, amount);\n  };\n\n  return (\n    <Card className=\"mx-auto w-50 mt-5 p-5\">\n      {alert.open && <Alert variant={alert.type}>{alert.message}</Alert>}\n      <Card.Title className=\"mb-5 text-left display-4\">{title}</Card.Title>\n      <Card.Body>\n        <Formik\n          validationSchema={validationSchema}\n          onSubmit={({ account, amount }, { resetForm }) => {\n            submitForm(account, amount);\n            resetForm();\n          }}\n          initialValues={{\n            account: '',\n            amount: 0.0,\n          }}\n        >\n          {({ handleSubmit, handleChange, values, dirty, isValid, errors }) => (\n            <Form onSubmit={handleSubmit}>\n              <Form.Group className=\"my-2\">\n                <FloatingLabel\n                  label={\n                    !!errors.account\n                      ? capitalize(errors.account)\n                      : `Account to ${transactionType} ${\n                          transactionType === 'Withdraw' ? 'from' : 'to'\n                        }`\n                  }\n                  className={!!errors.account && 'text-danger font-weight-bold'}\n                >\n                  <Form.Select\n                    className=\"form-select mb-4\"\n                    value={values.account}\n                    name=\"account\"\n                    onChange={(e) => {\n                      if (e.target.value) {\n                        setSelectedUser(\n                          e.target.value\n                            ? users.find(\n                                (user) => user.id === e.target.value\n                              ) || {}\n                            : {}\n                        );\n                        userSelectionSideEffect(e.target.value);\n                      }\n                      handleChange(e);\n                    }}\n                    isInvalid={!!errors.account}\n                  >\n                    <option key=\"default\" value=\"\">\n                      -\n                    </option>\n                    {users.map((user) => (\n                      <option key={`option-account-${user.id}`} value={user.id}>\n                        {`${user.name} (${\n                          validNumber(user.balance)\n                            ? formatCurrency(user.balance)\n                            : 'Balance Error'\n                        }) ${\n                          validNumber(user.balance) && user.balance < 0\n                            ? '***Overdraft***'\n                            : ''\n                        }`}\n                      </option>\n                    ))}\n                  </Form.Select>\n                </FloatingLabel>\n              </Form.Group>\n              <Form.Group className=\"my-2\">\n                <Form.Label>Amount</Form.Label>\n                <InputGroup hasValidation>\n                  <InputGroup.Text id=\"inputGroupPrepend\">$</InputGroup.Text>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"amount\"\n                    placeholder=\"99.99\"\n                    value={values.amount}\n                    onChange={handleChange}\n                    isInvalid={!!errors.amount}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {capitalize(errors.amount)}\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n              <Button\n                type=\"submit\"\n                className=\"mt-5 w-50 mx-2 inline-block\"\n                disabled={!isValid || !dirty}\n              >\n                {`${transactionType} `}\n                {isValid &&\n                  validNumber(values.amount) &&\n                  formatCurrency(values.amount)}\n                {isValid &&\n                  selectedUser.name &&\n                  ` ${transactionType === 'Withdraw' ? 'from' : 'into'} ${\n                    selectedUser.name\n                  }'s account`}\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default TransactionPage;\n","import * as Yup from 'yup';\nimport { UserContext } from '../services/UserContext';\nimport { useContext } from 'react';\nimport { useState } from 'react';\nimport { formatCurrency, validNumber } from '../services/Utilities';\nimport TransactionPage from '../components/TransactionPage';\n\nconst Withdraw = () => {\n  const { users, withdraw } = useContext(UserContext);\n  const [selectedUser, setSelectedUser] = useState({});\n  const schema = Yup.object().shape({\n    account: Yup.string()\n      .oneOf(\n        users.map((user) => user.id),\n        'Please select a valid account'\n      )\n      .required(),\n    amount: Yup.number()\n      .typeError('Please enter a valid, non-negative number')\n      .min(0.01, 'Please enter a value above zero')\n      .max(\n        validNumber(selectedUser.balance)\n          ? selectedUser.balance + 100\n          : Number.POSITIVE_INFINITY,\n        `Please enter a value below ${\n          selectedUser.name\n        }'s maximum overdraft limit (${formatCurrency(-100)})`\n      )\n      .required(),\n  });\n\n  return (\n    <TransactionPage\n      validationSchema={schema}\n      title={'Make a Withdrawal'}\n      transactionType={'Withdraw'}\n      submitFunction={withdraw}\n      userSelectionSideEffect={(userId) =>\n        setSelectedUser(users.find((usr) => usr.id === userId))\n      }\n    />\n  );\n};\n\nexport default Withdraw;\n"],"sourceRoot":""}